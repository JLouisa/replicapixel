// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// bunx prisma migrate dev --name 
// cargo loco db entities

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // url      = env("DATABASE_URL_LOCAL")
}

model Users {
  id                         Int       @id @default(autoincrement())
  pid                        String    @unique @db.Uuid
  email                      String    @unique @db.VarChar(255)
  password                   String    @db.VarChar(255)
  api_key                    String    @unique @db.VarChar(255)
  name                       String    @db.VarChar(255)
  stripe_customer_id         String?   @db.VarChar(255)
  picture                    String?   @db.VarChar(255)
  reset_token                String?   @db.VarChar(255)
  reset_sent_at              DateTime? @db.Timestamptz
  email_verification_token   String?   @db.VarChar(255)
  email_verification_sent_at DateTime? @db.Timestamptz
  email_verified_at          DateTime? @db.Timestamptz
  magicLink_token            String?   @db.VarChar(255)
  magicLink_expiration       DateTime? @db.Timestamptz

  TrainingModels  TrainingModels[]
  UserCredits     UserCredits[]
  Images          Images[]
  Transactions    Transactions[]
  oAuth2Sessions  OAuth2Session[]
  notifications   Notification[]
  settings        UserSettings?
  featureRequests FeatureRequest[]
  featureVote     FeatureVote[]

  @@index([pid], name: "idx-users-pid")
  @@index([email], name: "idx-users-email")
}

model OAuth2Session {
  id         Int      @id @default(autoincrement())
  user_id    Int
  session_id String   @db.VarChar(255)
  expires_at DateTime @db.Timestamptz
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  user Users @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([session_id], name: "idx-oauth2-session_id")
  @@map("o_auth2_sessions")
}

model TrainingModels {
  id                Int       @id @default(autoincrement())
  pid               String    @unique @db.Uuid
  user_id           Int
  name              String    @db.VarChar(255)
  age               Int
  sex               Sex
  ethnicity         Ethnicity
  basedOn           BasedOn
  eye_color         EyeColor
  bald              Boolean   @default(false)
  steps             Int
  create_mask       Boolean
  is_style          Boolean
  trigger_word      String    @db.VarChar(255)
  tensor_path       String?
  thumbnail         String?
  training_status   Status
  fal_output        Json?
  training_images   Json?
  fal_ai_request_id String?   @db.VarChar(255)
  s3_key            String    @db.VarChar(255)
  is_verified       Boolean   @default(false)
  deleted_at        DateTime? @db.Timestamptz
  created_at        DateTime  @default(now()) @db.Timestamptz
  updated_at        DateTime  @default(now()) @db.Timestamptz

  user   Users    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Images Images[]

  @@index([pid], name: "idx-training_models-pid")
  @@index([user_id], name: "idx-user_id-id")
}

model UserCredits {
  id            Int      @id @default(autoincrement())
  pid           String   @unique @db.Uuid
  user_id       Int      @unique
  credit_amount Int      @default(0)
  model_amount  Int      @default(0)
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @default(now()) @db.Timestamptz

  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Images {
  id                  Int         @id @default(autoincrement())
  pid                 String      @unique @db.Uuid
  user_id             Int
  training_model_id   Int
  pack_id             Int?
  user_prompt         String
  sys_prompt          String
  alt                 String
  num_inference_steps Int
  content_type        ImageFormat
  status              Status
  image_size          ImageSize
  fal_ai_request_id   String?     @db.VarChar(255)
  width               Int?
  height              Int?
  image_s3_key        String      @db.VarChar(255)
  image_url_fal       String?
  is_favorite         Boolean     @default(true)
  deleted_at          DateTime?   @db.Timestamptz
  created_at          DateTime    @default(now()) @db.Timestamptz
  updated_at          DateTime    @default(now()) @db.Timestamptz

  user           Users          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  training_model TrainingModels @relation(fields: [training_model_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pack           Packs?         @relation(fields: [pack_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([pid], name: "idx-images-pid")
  @@index([user_id], name: "idx-images-user_id")
  @@index([fal_ai_request_id], name: "idx-fal_ai_request_id-pid")
  @@index([training_model_id], name: "idx-images-training_model_id")
  @@index([created_at], name: "idx-images-created_at")
  @@index([updated_at], name: "idx-images-updated_at")
}

model Plans {
  id              Int       @id @default(autoincrement())
  pid             String    @unique @db.Uuid
  name            String    @unique
  plan_name       PlanNames @unique
  credit_amount   Int
  model_amount    Int
  price_cents     BigInt
  stripe_price_id String    @unique
  subtitle        String    @db.VarChar(255)
  features        String[]  @default([]) @db.Text
  cta             String    @db.VarChar(255)
  created_at      DateTime  @default(now()) @db.Timestamptz
  updated_at      DateTime  @default(now()) @db.Timestamptz
  is_popular      Boolean   @default(false)

  transactions Transactions[] @relation("PlanToTransactions")

  @@index([pid], name: "idx-plan-pid")
}

model Transactions {
  id             Int      @id @default(autoincrement())
  pid            String   @unique @db.Uuid
  user_id        Int
  plan_id        Int
  credit_amount  Int
  model_amount   Int
  payment_amount BigInt
  currency       String   @db.VarChar(16)
  payment_id     String   @db.VarChar(255)
  status         Status
  created_at     DateTime @default(now()) @db.Timestamptz
  updated_at     DateTime @default(now()) @db.Timestamptz

  plan Plans @relation("PlanToTransactions", fields: [plan_id], references: [id])
  user Users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([pid], name: "idx-transactions-pid")
  @@index([user_id], name: "idx-transactions-user_id")
}

model Packs {
  id                Int      @id @default(autoincrement())
  pid               String   @unique @db.Uuid
  title             String   @db.VarChar(255)
  short_description String   @db.VarChar(255)
  full_description  String   @db.Text
  pack_prompts      String
  credits           Int
  amount            Int
  image_url         String
  created_at        DateTime @default(now()) @db.Timestamptz
  updated_at        DateTime @default(now()) @db.Timestamptz

  Images Images[]

  @@index([pid], name: "idx-packs-pid")
}

model HandledStripeEvent {
  session_id   String   @id
  processed_at DateTime @default(now())

  @@map("handled_stripe_events")
}

model HandledFalEvent {
  request_id   String   @id
  processed_at DateTime @default(now())

  @@map("handled_fal_events")
}

model seaql_migrations {
  version    String @id @db.VarChar
  applied_at BigInt
}

model Notification {
  id         Int      @id @default(autoincrement())
  pid        String   @unique @db.Uuid
  user_id    Int
  message    String   @db.VarChar(255)
  read       Boolean  @default(false)
  link       String?
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @default(now()) @db.Timestamptz

  type NotificationType @default(Message)
  user Users            @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([user_id, read])
}

model UserSettings {
  id                        Int      @id @default(autoincrement())
  user_id                   Int      @unique
  enable_notification_email Boolean  @default(true)
  enable_marketing_email    Boolean  @default(true)
  created_at                DateTime @default(now()) @db.Timestamptz
  updated_at                DateTime @default(now()) @db.Timestamptz

  language Language        @default(English)
  theme    ThemePreference @default(System)
  user     Users           @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model FeatureRequest {
  id          Int           @id @default(autoincrement())
  user_id     Int
  title       String        @db.VarChar(255)
  description String        @db.Text
  status      FeatureStatus @default(Suggested)
  votes       Int           @default(0)
  created_at  DateTime      @default(now()) @db.Timestamptz
  updated_at  DateTime      @default(now()) @db.Timestamptz

  user        Users         @relation(fields: [user_id], references: [id])
  featureVote FeatureVote[]

  @@index([user_id])
  @@index([status])
  @@index([created_at])
}

model FeatureVote {
  id                 Int      @id @default(autoincrement())
  user_id            Int
  feature_request_id Int
  created_at         DateTime @default(now()) @db.Timestamptz
  updated_at         DateTime @default(now()) @db.Timestamptz

  user           Users          @relation(fields: [user_id], references: [id])
  featureRequest FeatureRequest @relation(fields: [feature_request_id], references: [id])

  @@unique([user_id, feature_request_id])
  @@index([user_id])
  @@index([feature_request_id])
}

// --- Enums ---
enum FeatureStatus {
  Suggested
  Planned
  In_progress
  Completed
  Rejected

  @@map("feature_status")
}

enum Language {
  English
  Spanish
  German
  Italian
  Dutch

  @@map("language")
}

enum NotificationType {
  Message
  System_update
  Promotion

  @@map("notification")
}

enum ThemePreference {
  Light
  Dark
  System

  @@map("theme_preference")
}

enum Status {
  Completed
  Training
  Pending
  Processing
  Failed
  Cancelled

  @@map("status")
}

enum PlanNames {
  Basic
  Premium
  Max

  @@map("plan_names")
}

enum Sex {
  Male
  Female

  @@map("sex")
}

enum Ethnicity {
  White
  Black
  Pacific
  Hispanic
  Asian
  SouthEastAsian
  SouthAsian
  MiddleEastern

  @@map("ethnicity")
}

enum BasedOn {
  RealPerson
  CreateInfluencerAI

  @@map("based_on")
}

enum EyeColor {
  Brown
  Blue
  Green
  Grey
  Hazel
  Red

  @@map("eye_color")
}

enum Emotion {
  Neutral
  Anger
  Disgust
  Fear
  Happy
  Sad
  Surprise

  @@map("emotion")
}

enum ImageSize {
  Square
  SquareHD
  Portrait43
  Portrait169
  Landscape43
  Landscape169

  @@map("image_size")
}

enum ImageFormat {
  png
  jpg
  zip

  @@map("image_format")
}
