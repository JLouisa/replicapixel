# Loco configuration file documentation

# Application logging configuration
logger:
  # Enable or disable logging.
  enable: true
  # Enable pretty backtrace (sets RUST_BACKTRACE=1)
  pretty_backtrace: true
  # Log level, options: trace, debug, info, warn or error.
  level: debug
  # Define the logging format. options: compact, pretty or json
  format: compact
  # By default the logger has filtering only logs that came from your code or logs that came from `loco` framework. to see all third party libraries
  # Uncomment the line below to override to see all third party libraries you can enable this config and override the logger filters.
  # override_filter: trace

# Web server configuration
server:
  # Port on which the server will listen. the server binding is 0.0.0.0:{PORT}
  port: {{ get_env(name="PORT") }}
  # Binding for the server (which interface to bind to)
  binding: {{ get_env(name="SERVER_BIND") }}
  # The UI hostname or IP address that mailers will point to.
  host: http://localhost
  # Out of the box middleware configuration. to disable middleware you can changed the `enable` field to `false` of comment the middleware block
  middlewares:
    static:
      enable: true
      must_exist: true
      precompressed: false
      folder:
        uri: "/static"
        path: "assets/static"
      fallback: "assets/views/404.html"
    logger:
      # Enable/Disable the middleware.
      enable: true

# Worker Configuration
workers:
  # specifies the worker mode. Options:
  #   - BackgroundQueue - Workers operate asynchronously in the background, processing queued.
  #   - ForegroundBlocking - Workers operate in the foreground and block until tasks are completed.
  #   - BackgroundAsync - Workers operate asynchronously in the background, processing tasks with async capabilities.
  mode: BackgroundAsync

  

# Mailer Configuration.
mailer:
  # SMTP mailer configuration.
  smtp:
    # Enable/Disable smtp mailer.
    enable: true
    # SMTP server host. e.x localhost, smtp.gmail.com
    host: {{get_env(name="EMAIL_HOST")}}
    # SMTP server port
    port:  {{get_env(name="EMAIL_PORT")}}
    # Use secure connection (SSL/TLS).
    secure:  {{get_env(name="EMAIL_SECURE")}}
    auth:
      user:  {{get_env(name="EMAIL_AUTH_USER")}}
      password:  {{get_env(name="EMAIL_AUTH_PASSWORD")}}
    # Override the SMTP hello name (default is the machine's hostname)
      hello_name:  {{get_env(name="NAME")}}

# Initializers Configuration
initializers:
  oauth2:
    secret_key: {{get_env(name="OAUTH_PRIVATE_KEY")}} # Optional, key for Private Cookie Jar, must be more than 64 bytes
    authorization_code: # Authorization code grant type
            # --- NEW Google Config ---
      - client_identifier: google # Identifier for the OAuth2 provider. Replace 'google' with your provider's name if different, must be unique within the oauth2 config.
        client_credentials:
          client_id: {{get_env(name="GOOGLE_OAUTH_CLIENT_ID")}} # Replace with your OAuth2 client ID.
          client_secret: {{get_env(name="GOOGLE_OAUTH_CLIENT_SECRET")}} # Replace with your OAuth2 client secret.
        url_config:
          auth_url: {{get_env(name="GOOGLE_AUTH_URL", default="https://accounts.google.com/o/oauth2/auth")}} # authorization endpoint from the provider
          token_url: {{get_env(name="GOOGLE_TOKEN_URL", default="https://www.googleapis.com/oauth2/v3/token")}} # token endpoint from the provider for exchanging the authorization code for an access token
          redirect_url: {{get_env(name="GOOGLE_REDIRECT_URL")}} # server callback endpoint for the provider, for default jwt route use 'default="http://localhost:5150/api/oauth2/google/callback/cookie"'
          profile_url: {{get_env(name="GOOGLE_PROFILE_URL", default="https://openidconnect.googleapis.com/v1/userinfo")}} # user profile endpoint from the provider for getting user data
          scopes:
            - {{get_env(name="GOOGLE_SCOPES_1", default="https://www.googleapis.com/auth/userinfo.email")}} # Scopes for requesting access to user data
            - {{get_env(name="GOOGLE_SCOPES_2", default="https://www.googleapis.com/auth/userinfo.profile")}} # Scopes for requesting access to user data
        cookie_config:
          protected_url: {{get_env(name="PROTECTED_URL")}} # Optional for jwt - For redirecting to protect url in cookie to prevent XSS attack
        timeout_seconds: {{ get_env(name="TIMEOUT") }} # Optional, default 600 seconds
            # --- NEW GitHub Config ---
      - client_identifier: github # Unique identifier for GitHub
        client_credentials:
          # Use NEW environment variables for GitHub credentials
          client_id: {{get_env(name="GITHUB_OAUTH_CLIENT_ID")}}
          client_secret: {{get_env(name="GITHUB_OAUTH_CLIENT_SECRET")}}
        url_config:
          # Use NEW environment variables for GitHub URLs (or use these defaults)
          auth_url: {{get_env(name="GITHUB_AUTH_URL", default="https://github.com/login/oauth/authorize")}}
          token_url: {{get_env(name="GITHUB_TOKEN_URL", default="https://github.com/login/oauth/access_token")}}
          # IMPORTANT: This redirect URL must match the one set in your GitHub OAuth App
          redirect_url: {{get_env(name="GITHUB_REDIRECT_URL", default="http://localhost:5150/api/oauth2/github/callback/jwt")}} # GitHub Callback
          # GitHub uses a different endpoint for user profile data
          profile_url: {{get_env(name="GITHUB_PROFILE_URL", default="https://api.github.com/user")}}
          # Request different scopes for GitHub (email scope often requires separate user endpoint call)
          scopes:
            - {{get_env(name="GITHUB_SCOPES_1", default="read:user")}}   # Basic user profile data
            - {{get_env(name="GITHUB_SCOPES_2", default="user:email")}} # To get email addresses
        cookie_config:
          # Protected URL can often be the same
          protected_url: {{get_env(name="PROTECTED_URL", default="http://localhost:5150/dashboard")}}
        timeout_seconds: {{ get_env(name="TIMEOUT") }}

# Database Configuration
database:
  # Database connection URI
  uri: {{ get_env(name="DATABASE_URL") }}
  # When enabled, the sql query will be logged.
  enable_logging: false
  # Set the timeout duration when acquiring a connection.
  connect_timeout: {{ get_env(name="DB_CONNECT_TIMEOUT") }}
  # Set the idle duration before closing a connection.
  idle_timeout: {{ get_env(name="DB_IDLE_TIMEOUT") }}
  # Minimum number of connections for a pool.
  min_connections: {{ get_env(name="DB_MIN_CONNECTIONS") }}
  # Maximum number of connections for a pool.
  max_connections: {{ get_env(name="DB_MAX_CONNECTIONS") }}
  # Run migration up when application loaded
  auto_migrate: true
  # Truncate database when application loaded. This is a dangerous operation, make sure that you using this flag only on dev environments or test mode
  dangerously_truncate: false
  # Recreating schema when application loaded.  This is a dangerous operation, make sure that you using this flag only on dev environments or test mode
  dangerously_recreate: false

# Redis Configuration
queue:
  kind: Redis
  # Redis connection URI
  uri: {{ get_env(name="REDIS_URL") }}
  # Dangerously flush all data in Redis on startup. dangerous operation, make sure that you using this flag only on dev environments or test mode
  dangerously_flush: false

# Authentication Configuration
auth:
  # JWT authentication
  jwt:
    location:
      from: Cookie  # Add 'from' to specify the variant
      name: {{ get_env(name="COOKIE_NAME") }}     # Specify the cookie name
    # Secret key for token generation and verification
    secret: {{ get_env(name="COOKIE_SECRET") }} 
    # Token expiration time in seconds
    expiration: {{ get_env(name="COOKIE_EXPIRATION") }} # 7 day

# Custom Settings Configuration
settings:
  aws:
    # AWS S3 Configuration
    access_key_id: {{ get_env(name="AWS_KEY_ID") }} 
    # AWS Secret Access Key for authentication
    secret_access_key: {{ get_env(name="AWS_SECRET_ACCESS_KEY") }} 
    s3:
      region: {{ get_env(name="AWS_S3_REGION") }} 
      bucket_name: {{ get_env(name="AWS_S3_BUCKET_NAME") }} 
      access_time: {{ get_env(name="AWS_S3_ACCESS_TIME") }} 
  # cloud:
  #   cloud_token: {{ get_env(name="CLOUD_TOKEN") }} 
  #   cloud_access_key_id: {{ get_env(name="CLOUD_KEY_ID") }} 
  #   cloud_secret_access_key: {{ get_env(name="CLOUD_SECRET_ACCESS_KEY") }} 
  #   r2:
  #     cloud_region: {{ get_env(name="CLOUD_S3_REGION") }} 
  #     cloud_bucket: {{ get_env(name="AWS_S3_BUCKET_NAME") }} 
  #     access_time: {{ get_env(name="CLOUD_S3_ACCESS_TIME") }} 
  fal_ai:
    fal_key: {{ get_env(name="FAL_AI_KEY") }} 
    generate_image_url: {{ get_env(name="FAL_GENERATE_IMAGE_URL") }} 
    training_model_url: {{ get_env(name="FAL_TRAINING_MODEL_URL") }} 
    webhook_url: {{ get_env(name="FAL_WEBHOOK_URL") }}
  website:
    name: {{ get_env(name="NAME") }}
    site: {{ get_env(name="SITE") }}
    site_domain: {{ get_env(name="SITE_DOMAIN") }}
    from_email: {{ get_env(name="FROM_EMAIL") }}
    google:
      google_client_id: {{ get_env(name="GOOGLE_OAUTH_CLIENT_ID") }}
      google_analytics_id: {{ get_env(name="GOOGLE_ANALYTICS_ID", default="YOUR_GA_ID_ENV") }}
      google_analytics_secret: {{ get_env(name="GOOGLE_ANALYTICS_CLIENT_SECRET", default="YOUR_GA_SECRET_ENV") }}
    meta_pixel:
      meta_pixel_id: {{ get_env(name="META_PIXEL_ID", default="YOUR_PIXEL_ID_ENV") }}
      meta_pixel_secret: {{ get_env(name="META_PIXEL_SECRET", default="YOUR_PIXEL_SECRET_ENV") }}
  stripe:
    site: {{ get_env(name="SITE") }}
    stripe_secret_key: {{ get_env(name="STRIPE_SECRET_KEY") }} 
    stripe_publishable_key: {{ get_env(name="STRIPE_PUBLISHABLE_KEY") }}
    stripe_webhook_secret: {{ get_env(name="STRIPE_WEBHOOK_SECRET") }}
    stripe_products:
      basic: {{ get_env(name="STRIPE_BASIC") }} 
      premium: {{ get_env(name="STRIPE_PREMIUM") }} 
      max: {{ get_env(name="STRIPE_MAX") }}
  redis:
    redis_url: {{ get_env(name="REDIS_URL") }}
