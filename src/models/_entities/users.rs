//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "Users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub pid: Uuid,
    #[sea_orm(unique)]
    pub email: String,
    pub password: String,
    #[sea_orm(unique)]
    pub api_key: String,
    pub name: String,
    pub stripe_customer_id: Option<String>,
    pub reset_token: Option<String>,
    pub reset_sent_at: Option<DateTimeWithTimeZone>,
    pub email_verification_token: Option<String>,
    pub email_verification_sent_at: Option<DateTimeWithTimeZone>,
    pub email_verified_at: Option<DateTimeWithTimeZone>,
    #[sea_orm(column_name = "magicLink_token")]
    pub magic_link_token: Option<String>,
    #[sea_orm(column_name = "magicLink_expiration")]
    pub magic_link_expiration: Option<DateTimeWithTimeZone>,
    pub picture: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::feature_request::Entity")]
    FeatureRequest,
    #[sea_orm(has_many = "super::feature_vote::Entity")]
    FeatureVote,
    #[sea_orm(has_many = "super::images::Entity")]
    Images,
    #[sea_orm(has_many = "super::notification::Entity")]
    Notification,
    #[sea_orm(has_many = "super::training_models::Entity")]
    TrainingModels,
    #[sea_orm(has_many = "super::transactions::Entity")]
    Transactions,
    #[sea_orm(has_one = "super::user_credits::Entity")]
    UserCredits,
    #[sea_orm(has_one = "super::user_settings::Entity")]
    UserSettings,
    #[sea_orm(has_many = "super::o_auth2_sessions::Entity")]
    OAuth2Sessions,
}

impl Related<super::feature_request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeatureRequest.def()
    }
}

impl Related<super::feature_vote::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FeatureVote.def()
    }
}

impl Related<super::images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Images.def()
    }
}

impl Related<super::notification::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Notification.def()
    }
}

impl Related<super::training_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrainingModels.def()
    }
}

impl Related<super::transactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Transactions.def()
    }
}

impl Related<super::user_credits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserCredits.def()
    }
}

impl Related<super::user_settings::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserSettings.def()
    }
}

impl Related<super::o_auth2_sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OAuth2Sessions.def()
    }
}
