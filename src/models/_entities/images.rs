//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use super::sea_orm_active_enums::ImageFormat;
use super::sea_orm_active_enums::ImageSize;
use super::sea_orm_active_enums::Status;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "Images")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub pid: Uuid,
    pub user_id: i32,
    pub training_model_id: i32,
    pub pack_id: Option<i32>,
    #[sea_orm(column_type = "Text")]
    pub user_prompt: String,
    #[sea_orm(column_type = "Text")]
    pub sys_prompt: String,
    #[sea_orm(column_type = "Text")]
    pub alt: String,
    pub num_inference_steps: i32,
    pub content_type: ImageFormat,
    pub status: Status,
    pub image_size: ImageSize,
    pub fal_ai_request_id: Option<String>,
    pub width: Option<i32>,
    pub height: Option<i32>,
    pub image_s3_key: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub image_url_fal: Option<String>,
    pub is_favorite: bool,
    pub deleted_at: Option<DateTimeWithTimeZone>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::packs::Entity",
        from = "Column::PackId",
        to = "super::packs::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Packs,
    #[sea_orm(
        belongs_to = "super::training_models::Entity",
        from = "Column::TrainingModelId",
        to = "super::training_models::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    TrainingModels,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::packs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Packs.def()
    }
}

impl Related<super::training_models::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::TrainingModels.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}
