//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "Packs")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub pid: Uuid,
    #[sea_orm(column_type = "Text")]
    pub pack_prompts: String,
    pub credits: i32,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub title: String,
    #[sea_orm(column_type = "Text")]
    pub full_description: String,
    pub short_description: String,
    pub num_images: i32,
    pub num_inference_steps: i32,
    pub features: Option<Vec<String>>,
    pub images: Option<Vec<String>>,
    #[sea_orm(column_type = "Text")]
    pub main_image: String,
    pub used: i32,
    pub stars: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::images::Entity")]
    Images,
}

impl Related<super::images::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Images.def()
    }
}
